name: Full Strapi Deploy to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: strapi-varun-ecr
  IMAGE_TAG: latest
  CLUSTER_NAME: strapiv-cluster
  SERVICE_NAME: strapiv-service
  TASK_FAMILY: strapiv-task
  CONTAINER_NAME: strapiv-container

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY \
          || aws ecr create-repository --repository-name $ECR_REPOSITORY

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: strapi-ecr-repo     # <-- Make sure this matches the repo name created in Terraform1
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./Strapi-app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          - name: Register ECS task definition
          id: register-task-def
          run: |
            aws ecs register-task-definition \
              --family strapi-task \
              --network-mode awsvpc \
              --requires-compatibilities FARGATE \
              --cpu "256" \
              --memory "512" \
              --container-definitions "[
                {
                  \"name\": \"strapi-container\",
                  \"image\": \"$IMAGE_URI\",
                  \"essential\": true,
                  \"portMappings\": [
                    {
                      \"containerPort\": 1337,
                      \"hostPort\": 1337,
                      \"protocol\": \"tcp\"
                    }
                  ]
                }
              ]"
        
          echo "$NEW_DEF" > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

      - name: Update ECS service with new task
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment
